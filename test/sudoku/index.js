const assert = require('chai').assert;
const checkSolutionValidity = require('../../src/sudoku');

suite('Check whether Sudoku solution is valid', () => {
    test('Valid case 1', () => {
        assert.isTrue(checkSolutionValidity([
            [5, 3, 4, 6, 7, 8, 9, 1, 2],
            [6, 7, 2, 1, 9, 5, 3, 4, 8],
            [1, 9, 8, 3, 4, 2, 5, 6, 7],
            [8, 5, 9, 7, 6, 1, 4, 2, 3],
            [4, 2, 6, 8, 5, 3, 7, 9, 1],
            [7, 1, 3, 9, 2, 4, 8, 5, 6],
            [9, 6, 1, 5, 3, 7, 2, 8, 4],
            [2, 8, 7, 4, 1, 9, 6, 3, 5],
            [3, 4, 5, 2, 8, 6, 1, 7, 9]
        ]));
    });

    test('Valid case 2', () => {
        assert.isTrue(checkSolutionValidity([
            [9, 5, 7, 6, 1, 3, 2, 8, 4],
            [4, 8, 3, 2, 5, 7, 1, 9, 6],
            [6, 1, 2, 8, 4, 9, 5, 3, 7],
            [1, 7, 8, 3, 6, 4, 9, 5, 2],
            [5, 2, 4, 9, 7, 1, 3, 6, 8],
            [3, 6, 9, 5, 2, 8, 7, 4, 1],
            [8, 4, 5, 7, 9, 2, 6, 1, 3],
            [2, 9, 1, 4, 3, 6, 8, 7, 5],
            [7, 3, 6, 1, 8, 5, 4, 2, 9]
        ]));
    });

    test('Valid case 3', () => {
        assert.isTrue(checkSolutionValidity([
            [4, 2, 6, 5, 7, 1, 3, 9, 8],
            [8, 5, 7, 2, 9, 3, 1, 4, 6],
            [1, 3, 9, 4, 6, 8, 2, 7, 5],
            [9, 7, 1, 3, 8, 5, 6, 2, 4],
            [5, 4, 3, 7, 2, 6, 8, 1, 9],
            [6, 8, 2, 1, 4, 9, 7, 5, 3],
            [7, 9, 4, 6, 3, 2, 5, 8, 1],
            [2, 6, 5, 8, 1, 4, 9, 3, 7],
            [3, 1, 8, 9, 5, 7, 4, 6, 2]
        ]));
    });

    test('Invalid case 1', () => {
        assert.isFalse(checkSolutionValidity([
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9]
        ]));
    });

    test('Invalid case 2', () => {
        assert.isFalse(checkSolutionValidity([
            [5, 3, 4, 6, 7, 8, 9, 1, 5],
            [6, 7, 2, 1, 9, 5, 3, 4, 8],
            [1, 9, 8, 3, 4, 2, 5, 6, 7],
            [8, 5, 9, 7, 6, 1, 4, 2, 3],
            [4, 2, 6, 8, 5, 3, 7, 9, 1],
            [7, 1, 3, 9, 2, 4, 8, 5, 6],
            [9, 6, 1, 5, 3, 7, 2, 8, 4],
            [2, 8, 7, 4, 1, 9, 6, 3, 5],
            [3, 4, 5, 2, 8, 6, 1, 7, 9]
        ]));
    });

    test('Invalid case 3', () => {
        assert.isFalse(checkSolutionValidity([
            [9, 5, 7, 6, 1, 3, 2, 8, 4],
            [4, 8, 3, 2, 5, 7, 1, 9, 6],
            [6, 1, 2, 8, 4, 9, 5, 3, 7],
            [1, 7, 8, 3, 3, 4, 9, 5, 2],
            [5, 2, 4, 9, 7, 1, 3, 6, 8],
            [3, 6, 9, 5, 2, 9, 7, 4, 1],
            [8, 4, 5, 7, 9, 2, 6, 1, 3],
            [2, 9, 1, 4, 3, 6, 8, 7, 5],
            [7, 3, 6, 1, 8, 5, 4, 2, 9]
        ]));
    });

    test('Invalid case 4', () => {
        assert.isFalse(checkSolutionValidity([
            [4, 2, 6, 5, 7, 1, 3, 9, 8],
            [8, 5, 7, 2, 9, 3, 1, 4, 6],
            [1, 3, 9, 4, 4, 8, 2, 7, 5],
            [9, 7, 1, 3, 8, 5, 6, 2, 4],
            [5, 4, 3, 7, 2, 6, 8, 1, 9],
            [6, 8, 2, 1, 4, 9, 7, 5, 3],
            [7, 9, 4, 6, 3, 2, 5, 8, 1],
            [2, 6, 5, 8, 1, 4, 9, 3, 7],
            [3, 2, 8, 9, 5, 7, 4, 6, 2]
        ]));
    });
});
